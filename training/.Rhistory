my.coalescent.log.likelihood.unstructuredModel5 <- function (bdt,dx,t0,x0,parms = NA, fgyResolution = 2000, integrationMethod = "euler", censorAtHeight = FALSE, forgiveAgtY = 0.2)
{
y0 <- c(x0,Lambda=0)
times <- unique(sort(c(bdt$maxSampleTime - bdt$heights, seq(t0,bdt$maxSampleTime, length.out = fgyResolution))))
ox <- ode(y = y0, times, func = dx, parms, method = integrationMethod, bdt=bdt)
times2 <- sort(unique(c(bdt$maxSampleTime - bdt$sampleTimes,  bdt$nodeHeights)))
#print(times2)
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
nodeIndices = (nI <- unique(c(1, sort(which(oL[, 1] %in% bdt$nodeHeights)))))
thetas <- sapply(1:(length(nI) - 1), function(i) exp(-(oL[nI[i + 1], 2] - oL[nI[i], 2])))
corates <- sapply(bdt$nodeHeights, function(h) dLambda(h, NA,  parms, ox, bdt)[[1]])
ll <- unname(sum(log(corates)) + sum(log(thetas)))
return(ll)
}
ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2)
dLambda <- function(t, y, parms, ox, bdt) {
h <- t
t <- bdt$maxSampleTime - h
x <- xinterp(h,ox,bdt)
#print(x)
Y <- x["I"]
#print(Y)
f <- with(as.list(c(x,parms)), beta*S*I/(S+I))
#print(f)
print(h)
A <- n.extant(h, bdt)
pco <- (A * (A - 1)/2) * (2/max(2, Y * (Y - 1)))
if (Y <= 2){
pco <- (A * (A - 1)/2)
}
if (A < 2){
dL <- 0
}
else dL <- pco * f
list(c(Lambda = unname(dL)))
}
source('~/Dropbox/pangeaabc/myfun.R')
dLambda <- function(t, y, parms, ox, bdt) {
h <- t
t <- bdt$maxSampleTime - h
x <- xinterp(h,ox,bdt)
#print(x)
Y <- x["I"]
#print(Y)
f <- with(as.list(c(x,parms)), beta*S*I/(S+I))
#print(f)
print(h)
A <- n.extant(h, bdt)
pco <- (A * (A - 1)/2) * (2/max(2, Y * (Y - 1)))
if (Y <= 2){
pco <- (A * (A - 1)/2)
}
if (A < 2){
dL <- 0
}
else dL <- pco * f
list(c(Lambda = unname(dL)))
}
ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2)
ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2)
source('~/Dropbox/pangeaabc/myfun.R')
source('~/Dropbox/pangeaabc/myfun.R')
dLambda <- function(t, y, parms, ox, bdt) {
h <- t
t <- bdt$maxSampleTime - h
x <- xinterp(h,ox,bdt)
#print(x)
Y <- x["I"]
#print(Y)
f <- with(as.list(c(x,parms)), beta*S*I/(S+I))
#print(f)
#print(h)
A <- n.extant(h, bdt)
print(paste(h,A))
pco <- (A * (A - 1)/2) * (2/max(2, Y * (Y - 1)))
if (Y <= 2){
pco <- (A * (A - 1)/2)
}
if (A < 2){
dL <- 0
}
else dL <- pco * f
list(c(Lambda = unname(dL)))
}
ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2)
plot(tr)
n.extant <- function(t,bdt) {
h <- t#bdt$maxSampleTime-t
i <- which(bdt$ltt_times - h < 0, arr.ind = TRUE)
if (length(i) == 0)
return(1)
bdt$ltt[i[length(i)]]
}
o
ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2)
ll5
ll1
ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
source('~/Dropbox/pangeaabc/myfun.R')
source('~/Dropbox/pangeaabc/myfun6.R')
ll1
ll5
source('~/Dropbox/pangeaabc/myfun6.R')
ll1
ll5
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2)
)
system.time(ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll5 <- my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
l <- lineprof(my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
library(lineprof)
l <- lineprof(my.coalescent.log.likelihood.unstructuredModel5(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
shine(l)
shine(l)
source('~/Dropbox/pangeaabc/myfun7.R')
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
S
I
times <- unique(sort(c(bdt$maxSampleTime - bdt$heights, seq(t0,bdt$maxSampleTime, length.out = fgyResolution))))
ox <- ode(y = x0, times, func = dx, parms, method = integrationMethod, bdt=bdt)
times2 <- sort(unique(c(bdt$maxSampleTime - bdt$sampleTimes,  bdt$nodeHeights)))
#print(times2)
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
dLambda <- function(t, y, parms, ox, bdt) {
h <- t
t <- bdt$maxSampleTime - h
x <- xinterp(h,ox,bdt)
print(x)
Y <- x["I"]
#print(Y)
f <- with(as.list(c(x,parms)), beta*S*I/(S+I))
#print(f)
#print(h)
A <- n.extant(h, bdt)
#print(paste(h,A))
pco <- (A * (A - 1)/2) * (2/max(2, Y * (Y - 1)))
if (Y <= 2){
pco <- (A * (A - 1)/2)
}
if (A < 2){
dL <- 0
}
else dL <- pco * f
list(c(Lambda = unname(dL)))
}
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
ox
names(ox)
dimnames(ox)
x0
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
x0
x0=c(S=39999,I=1)
ox <- ode(y = x0, times, func = dx, parms, method = integrationMethod, bdt=bdt)
ox
dimnames(ox)
oL <- ode(y = c(Lambda = 0), times2, func = dLambda, parms, method = integrationMethod, ox=ox, bdt=bdt)
ox
xnames <- dimnames(ox)[[2]][c(2,dim(ox)[2]-1)]
xnames
dimnames(ox)
dimnames(ox)[[2]]
xinterp <- function(h,ox,bdt) {
xinterps <- lapply(2:ncol(ox), function(k) approxfun(rule = 2, bdt$maxSampleTime - ox[, 1], ox[, k]))
xnames <- dimnames(ox)[[2]][c(2,dim(ox)[2])]
x <- sapply(1:length(xnames), function(k) xinterps[[k]](h))
names(x) <- xnames
x
}
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
source('~/Dropbox/pangeaabc/myfun7.R')
ll1
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel7(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll7 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll1
ll8
sort(unique(bdt$maxSampleTime - bdt$heights))
?ode
source('~/Dropbox/pangeaabc/myfun8.R')
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll1 <- my.coalescent.log.likelihood.unstructuredModel(bdt,births,deaths,nonDemeDynamics,t0,c(I=1,S=39999),parms=pars,fgyResolution=2000,integrationMethod="rk4",censorAtHeight=FALSE,forgiveAgtY=0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode45", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode45", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll1
ll8
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "ode23", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "lsoda", censorAtHeight = FALSE, forgiveAgtY = 0.2))
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
source('~/Dropbox/pangeaabc/myfun8.R')
source('~/Dropbox/pangeaabc/myfun8.R')
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 1000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 10000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
ll8
ll1
system.time(ll8 <- my.coalescent.log.likelihood.unstructuredModel8(bdt,dx,t0,c(S=39999,I=1),parms = pars, fgyResolution = 2000, integrationMethod = "rk4", censorAtHeight = FALSE, forgiveAgtY = 0.2))
devtools::install_github("jjallaire/revealjs")
start <- c(367.7,342.1,346.7,385.3,338.8,349,377.4,340.1,321.5,386.6,371.8,307.4)
end <- c(369.4,342.8,346.3,383.5,339,349.9,376.2,339.2,319.7,385.2,370.0,305.4)
t.test(end-start)
wilcox.test(end-start,correct=FALSE)
tr <- read.tree("ExaML_result.train")
library(ape)
tr <- read.tree("ExaML_result.train")
setwd("~/Projects/pangea-round2/training")
tr <- read.tree("ExaML_result.train")
tr
library(phangorn)
tr.root <- midpoint(tr)
tr.root
ltt
?LTT
tr.ltt <- ltt.plot(tr.root)
di2multi
tr.multi <- di2multi(tr.root,0.001)
ltt.plot(tr.multi)
tr.multi <- di2multi(tr.root,0.005)
ltt.plot(tr.multi)
tr.multi
names(tr.multi)
tr$edge.length
tr$edge.length==0
sum(tr$edge.length==0)
sum(tr.multi$edge.length==0)
tr.multi
tr.multi.root<- midpoint(tr.multi)
ltt.plot(tr.multi.root)
ltt.plot(tr.multi)
ltt.plot
ltt.plot.coords
hist(tr.multi$edge.length)
hist(tr.multi$edge.length)
tr.multi
tr
names(tr.multi)
tr.multi$edge
tr.multi.net <- network(tr.multi$edge,directed=FALSE,loops=FALSE)
library(network)
tr.multi.net <- network(tr.multi$edge,directed=FALSE,loops=FALSE)
library(sna)
degree
degree(tr.multi.net)
hist(degree(tr.multi.net))
table(degree(tr.multi.net))
tr.multi.net
plot(tr.multi.net)
?plot.network
plot(tr.multi.net,vertex.cex=0,displaylabels=FALSE)
degree(tr.multi.net)>100
network.vertex.names
network.vertex.names(tr.multi.net)
sort(unique(tr.multi$edge))
sort(tr.multi$edge)
unique(sort(tr.multi$edge))
tr.multi.deg <- degree(tr.multi.net)
table(tr.multi.deg)
seq(1,length(tr.multi.deg))[tr.multi.deg>100]
root <- seq(1,length(tr.multi.deg))[tr.multi.deg>100]
tr.multi.root <- seq(1,length(tr.multi.deg))[tr.multi.deg>100]
tr.multi.root
get.edges(tr.multi.net,tr.multi.root)
get.edges(tr.multi.net,alter=tr.multi.root)
tr.multi.edges
tr.multi$edges
tr.multi$edge
tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi.edge[,2]==tr.multi.root,]
tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi$edge[,2]==tr.multi.root,]
tr.multi$edge[tr.multi$edge[,1]==tr.multi.root,]
tr.multi$edge[tr.multi$edge[,2]==tr.multi.root,]
tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi$edge[,2]==tr.multi.root,]
table(tr.multi.deg)
364*2
?degree
tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi$edge[,2]==tr.multi.root,]
tr.multi.root.edges <- tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi$edge[,2]==tr.multi.root,]
tr.multi.root.alters <- unique(sort(tr.multi.root.edges))
tr.multi.root.alters
tr.multi.root.alters <- tr.multi.root.alters[tr.multi.root.alters!=tr.multi.root]
tr.multi.root.alters
library(adephylo)
?listTips
listTips(tr.multi.root)
getDescendants
library(phytools)
getDescendants
listTips(tr.multi)
getDescendants(tr.multi)
getDescendants(tr.multi,tr.multi.root.alters[1])
tr.multi.root.alters
getDescendants(tr.multi,tr.multi.root.alters[1])
nroots <- length(tr.multi.root.alters)
clusterlist <- list()
clusterlist <- list()
nroots <- length(tr.multi.root.alters)
for(i in 1:nroots){
clusterlist[[i]] <- getDescendants(tr.multi,tr.multi.root.alters[i])
}
clusterlist
lapply(clusterlist,length)
lapply(clusterlist,length) %>% unlist %>% sum
library(magrittr)
lapply(clusterlist,length) %>% unlist %>% sum
tr.multi
1600+698
tr
lapply(clusterlist,max) %>% max
lapply(clusterlist,max) %>% unlist %>% max
ntips <- length(tr.multi$tip.label)
ntips
clusterlist <- list()
nroots <- length(tr.multi.root.alters)
ntips <- length(tr.multi$tip.label)
for(i in 1:nroots){
alldesc <- getDescendants(tr.multi,tr.multi.root.alters[i])
clusterlist[[i]] <- alldesc[alldesc<=ntips]
}
lapply(clusterlist,length) %>% unlist %>% sum
clusterlist
lapply(clusterlist,length) %>% unlist %>% table
clusteridlist <- list()
for(i in 1:length(clusterlist)){
ids <- tr.multi$tip.label[clusterlist[[i]]]
clusteridlist[[i]] <- ids
}
clusteridlist
dput(clusteridlist)
dput(clusteridlist,"clusterids.R")
setwd("~/Projects/pangea-round2/training")
library(ape)
library(phylobase)
library(adephylo)
library(phytools)
library(magrittr)
datadir <- "150227_PANGEAsim_Regional_Train1"
gag <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_gag.fa",sep="/"),format="fasta",as.matrix=TRUE)
pol <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_pol.fa",sep="/"),format="fasta",as.matrix=TRUE)
env <- read.dna(paste(datadir,"150227_HPTN071_TRAIN1_SIMULATED_env.fa",sep="/"),format="fasta",as.matrix=TRUE)
s <- cbind(gag,pol,env)
s2 <- s
s2.names <- row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
row.names(s2) <- s2.names
s
s1
s2
tr <- read.tree("ExaML_result.train")
tr.root <- midpoint(tr)
library(phangorn)
tr.root <- midpoint(tr)
tr.ltt <- ltt.plot(tr.root)
tr.multi <- di2multi(tr.root,0.005)
ltt.plot(tr.multi)
library(network)
library(sna)
tr.multi.net <- network(tr.multi$edge,directed=FALSE,loops=FALSE)
tr.multi.deg <- degree(tr.multi.net)
install.packages("sna")
library(sna)
tr.multi.net <- network(tr.multi$edge,directed=FALSE,loops=FALSE)
tr.multi.deg <- degree(tr.multi.net)
table(tr.multi.deg) # rather oddly, this doubles the degree
tr.multi.root <- seq(1,length(tr.multi.deg))[tr.multi.deg>100]
tr.multi.root.edges <- tr.multi$edge[tr.multi$edge[,1]==tr.multi.root|tr.multi$edge[,2]==tr.multi.root,]
tr.multi.root.alters <- unique(sort(tr.multi.root.edges))
tr.multi.root.alters <- tr.multi.root.alters[tr.multi.root.alters!=tr.multi.root]
clusterlist <- list()
nroots <- length(tr.multi.root.alters)
ntips <- length(tr.multi$tip.label)
for(i in 1:nroots){
alldesc <- getDescendants(tr.multi,tr.multi.root.alters[i])
clusterlist[[i]] <- alldesc[alldesc<=ntips]
}
library(phytools)
install.packages("phytools")
library(phytools)
clusterlist <- list()
nroots <- length(tr.multi.root.alters)
ntips <- length(tr.multi$tip.label)
for(i in 1:nroots){
alldesc <- getDescendants(tr.multi,tr.multi.root.alters[i])
clusterlist[[i]] <- alldesc[alldesc<=ntips]
}
clusterlist
clusteridlist
lapply(clusterlist,length) %>% unlist %>% table
clusteridlist <- list()
for(i in 1:length(clusterlist)){
ids <- tr.multi$tip.label[clusterlist[[i]]]
clusteridlist[[i]] <- ids
}
clusteridlist
i=1
ids <- clusteridlist[[i]]
ids
names(s)
row.names(s)
ids
i=2
ids <- clusteridlist[[i]]
ids
i=4
ids <- clusteridlist[[i]]
ids
i=6
ids <- clusteridlist[[i]]
ids
clusteridlist
ids <- clusteridlist[[364]]
ids
grep(ids,row.names(s))
apply(ids,grep,row.names(s))
apply(ids,1,grep,row.names(s))
clusterids
lapply(clusteridlist,length)
lapply(clusteridlist,length) %>% unlist %>% sort
i=`
`
i=1
ids <- clusteridlist[[i]]
ids
grep(ids,row.names(s2))
row.names(s)
st
st %>% row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,tail,1) %>% unlist %>% as.double
st <- row.names(s) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,tail,1) %>% unlist %>% as.double
st
seqlist <- list()
for(i in 1:length(clusteridlist)){
ids <- clusteridlist[[i]]
idx <- grep(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx,]
row.names(sq) <- paste(row.names(sq),sqt,sep="_")
seqlist[[i]] <- sq
write.dna(sq,paste("train.fas",i,sep="."),format="fasta",nbcol=-1,colsep="")
}
seqlist <- list()
for(i in 1:length(clusteridlist)){
ids <- clusteridlist[[i]]
idx <- grep(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx]
row.names(sq) <- paste(row.names(sq),sqt,sep="_")
seqlist[[i]] <- sq
write.dna(sq,paste("train.fas",i,sep="."),format="fasta",nbcol=-1,colsep="")
}
i=1
ids <- clusteridlist[[i]]
idx <- grep(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx]
idx
lapply(clusteridlist,length)
clusteridlist[364]
clusteridlist[[364]]
idx <- grep(ids,row.names(s2))
idx
i=364
ids <- clusteridlist[[i]]
idx <- grep(ids,row.names(s2))
ids
idx <- match(ids,row.names(s2))
idx
seqlist <- list()
for(i in 1:length(clusteridlist)){
ids <- clusteridlist[[i]]
idx <- match(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx]
row.names(sq) <- paste(row.names(sq),sqt,sep="_")
seqlist[[i]] <- sq
write.dna(sq,paste("train.fas",i,sep="."),format="fasta",nbcol=-1,colsep="")
}
seqlist <- list()
for(i in 1:length(clusteridlist)){
ids <- clusteridlist[[i]]
idx <- match(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx]
row.names(sq) <- paste(row.names(sq),sqt,sep="_")
seqlist[[i]] <- sq
write.dna(sq,paste("clusters/train.fas",i,sep="."),format="fasta",nbcol=-1,colsep="")
}
seqlist <- list()
for(i in 1:length(clusteridlist)){
ids <- clusteridlist[[i]]
idx <- match(ids,row.names(s2))
sq <- s2[idx,]
sqt <- st[idx]
row.names(sq) <- paste(row.names(sq),sqt,sep="_")
seqlist[[i]] <- sq
write.dna(sq,paste("clusters/train.fas",i,sep="."),format="fasta",nbcol=-1,colsep="")
}
