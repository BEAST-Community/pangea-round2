row.names(vill.ex2.seq) <- paste(row.names(vill.ex2.seq),tdd[match(row.names(vill.ex2.seq),tl)],sep="_")
vill.ex2.seq
vill.ex.rtt
tdd <- round(td*365)
vill.ex.td <- td[match(vill.ex$tip.label,tl)]
vill.ex.tdd <- tdd[match(vill.ex$tip.label,tl)]
vill.ex2 <- vill.ex
vill.ex2$tip.label <- paste(vill.ex$tip.label,vill.ex.tdd,sep="_")
vill.ex2.rtt <- rtt(vill.ex2,vill.ex.td)
vill.ex2.seq <- s2
vill.ex2.seq
vill.ex2.rtt
write.dna(vill.ex2.seq,"vill_timed.fas",format="fasta",nbcol=-1,colsep="")
write.tree(vill.ex2.rtt,"vill_ex2_rtt.tre")
vill.ex2.seq <- s2
vill.ex2.seq
tl
row.names(vill.ex2.seq) <- paste(row.names(vill.ex2.seq),tdd[match(row.names(vill.ex2.seq),tl)],sep="_")
vill.ex2.seq
vill.ex2.rtt
write.dna(vill.ex2.seq,"vill_timed.fas",format="fasta",nbcol=-1,colsep="")
write.tree(vill.ex2.rtt,"vill_ex2_rtt.tre")
load("~/Projects/pangea-round2/training/phylotest2.RData")
i=8
td <- tempdir()
fn <- tempfile(tmpdir=td,fileext=".phy")
fn
sq
slen
sq <- slist[[i]]
sq
write.dna(sq,fn,format="interleaved")
cmd <- sprintf("iqtree-omp -nt 2 -s %s -spp village_partition.nex",fn)
system(cmd)
cmd <- sprintf("iqtree-omp -nt 2 -s %s -spp regional_partition.nex",fn)
system(cmd)
setwd("~/Projects/pangea-round2/training")
cmd <- sprintf("iqtree-omp -nt 2 -s %s -spp regional_partition.nex",fn)
system(cmd)
list.files(path=td)
l <- readLines("regional_partition.nex.iqtree")
l
paste(l)
iqlist <- list()
iqloglist <- list()
for(i in 1:numtrees){
print(i)
sq <- slist[[i]]
if(slen[i]>=4){
td <- tempdir()
fn <- tempfile(tmpdir=td,fileext=".phy")
write.dna(sq,fn,format="interleaved")
cmd <- sprintf("iqtree-omp -nt 2 -s %s -spp regional_partition.nex",fn)
system(cmd)
tr <- read.tree("regional_partition.nex.treefile")
l <- readLines("regional_partition.nex.iqtree")
iqlist[[i]] <- tr
iqloglist[[i]] <- l
unlink(fn)
}else{
iqlist[[i]] <- NA
iqloglist[[i]] <- NA
}
}
iqlist
testtrees <- iqlist
phdist <- list()
kfdist <- list()
for(i in 1:numtrees){
print(i)
tr1 <- testtrees[[i]]
tr2 <- trees[[i]]
if(!is.na(tr1)){
phdist[[i]] <- dist.topo(tr1,tr2,"PH85")
kfdist[[i]] <- dist.topo(tr1,tr2,"score")
}else{
phdist[[i]] <- NA
kfdist[[i]] <- NA
}
}
iq.phdist <- phdist
iq.kfdist <- kfdist
table(iq.phdist %>% unlist %>% na.omit %>% as.integer)
hist(iq.kfdist %>% unlist %>% na.omit %>% as.numeric)
table(rx.phdist)
rxp.phdist
table(iq.phdist %>% unlist %>% na.omit %>% as.integer)
table(rxp2.phdist %>% unlist %>% na.omit %>% as.integer)
i=8
sq <- slist[[i]]
td <- tempdir()
fn <- tempfile(tmpdir=td)
write.dna(sq,fn,format="interleaved")
cmd1 <- sprintf("/usr/local/bin/parse-examl -s %s.phy -m DNA -q %s -n %s",fn,"regional_partition",fn)
system(cmd1)
cmd`
`
cmd1
strsplit(fn,"/") %>% tail(.,1)
strsplit(fn,"/") %>% lapply(.,tail,1)
runid <- strsplit(fn,"/") %>% lapply(.,tail,1) %>% unlist
fn <- tempfile(tmpdir=td)
runid <- strsplit(fn,"/") %>% lapply(.,tail,1) %>% unlist
write.dna(sq,paste(fn,".phy",sep=""),format="interleaved")
cmd1 <- sprintf("/usr/local/bin/parse-examl -s %s.phy -m DNA -q %s -n %s",fn,"regional_partition",runid)
cmd1
system(cmd1)
cmd2 <- sprintf("raxmlHPC-PTHREADS-SSE3 -y -m GTRCAT -p 12345 -s %s.phy -n %s_startingtree",fn,runid)
cmd2
system(cmd2)
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n $1",runid,fn,runid)
cmd3
system(cmd3)
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s",runid,fn,runid)
cmd3
system(cmd3)
list.files(path=td)
cmd1 <- sprintf("/usr/local/bin/parse-examl -s %s.phy -m DNA -q %s -n %s",fn,"regional_partition",runid)
system(cmd1)
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s",runid,fn,runid)
cmd3
list.files(path=".")
list.files(pattern="binary",path=".")
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s -w %s",runid,fn,runid,td)
system(cmd3)
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s -w %s",runid,runid,runid,td)
cmd3
list.files(pattern="file",path=".")
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s -w %s",runid,runid,runid,td)
system(cmd3)
tr <- read.tree(paste(td,"/","ExaML_result.",runid,sep=""))
tr
exlist <- list()
for(i in 1:numtrees){
print(i)
sq <- slist[[i]]
if(slen[i]>=4){
td <- tempdir()
fn <- tempfile(tmpdir=td)
runid <- strsplit(fn,"/") %>% lapply(.,tail,1) %>% unlist
write.dna(sq,paste(fn,".phy",sep=""),format="interleaved")
# turn binary
cmd1 <- sprintf("/usr/local/bin/parse-examl -s %s.phy -m DNA -q %s -n %s",fn,"regional_partition",runid)
system(cmd1)
cmd2 <- sprintf("raxmlHPC-PTHREADS-SSE3 -y -m GTRCAT -p 12345 -s %s.phy -n %s_startingtree",fn,runid)
system(cmd2)
cmd3 <- sprintf("mpirun -np 7 /usr/local/bin/examl -D -t RAxML_parsimonyTree.%s_startingtree -m PSR -s %s.binary -n %s -w %s",runid,runid,runid,td)
system(cmd3)
tr <- read.tree(paste(td,"/","ExaML_result.",runid,sep=""))
exlist[[i]] <- tr
unlink(fn)
}else{
exlist[[i]] <- NA
}
}
testtrees <- exlist
phdist <- list()
kfdist <- list()
for(i in 1:numtrees){
print(i)
tr1 <- testtrees[[i]]
tr2 <- trees[[i]]
if(!is.na(tr1)){
phdist[[i]] <- dist.topo(tr1,tr2,"PH85")
kfdist[[i]] <- dist.topo(tr1,tr2,"score")
}else{
phdist[[i]] <- NA
kfdist[[i]] <- NA
}
}
ex.phdist <- phdist
ex.kfdist <- kfdist
table(ex.phdist %>% unlist %>% na.omit %>% as.integer)
table(rxp.phdist %>% unlist %>% na.omit %>% as.integer)
table(phymlp.phdist %>% unlist %>% na.omit %>% as.integer)
phymlplist <- list()
phymlplist <- list()
for(i in 1:numtrees){
print(i)
sq <- slist[[i]]
#sqn <- row.names(sq) %>% strsplit(.,"|",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
#row.names(sq) <- sqn
if(slen[i]>=4){
td <- tempdir()
#gagfn <- tempfile(tmpdir=td,fileext="_gag.phy")
gagfn="gag.phy"
write.dna(sq[,1:1440],gagfn,format="interleaved")
#polfn <- tempfile(tmpdir=td,fileext="_pol.phy")
polfn="pol.phy"
write.dna(sq[,1441:4284],polfn,format="interleaved")
#envfn <- tempfile(tmpdir=td,fileext="_env.phy")
envfn="env.phy"
write.dna(sq[,4285:6807],envfn,format="interleaved")
#xmlfn <- tempfile(tmpdir=td,fileext=".xml")
xmlfn="test.xml"
#outfn <- tempfile(tmpdir=td,fileext=".out")
outfn="test.out"
phyxml <- phyml.partitioned(paste("r",i,sep="_"),outfn,gagfn,polfn,envfn)
cat(phyxml,file=xmlfn)
cmd <- sprintf("phyml --xml=%s",xmlfn)
txt <- system(cmd)
tr <- read.tree(paste(outfn,"phyml_tree",sep="_"))
phymlplist[[i]] <- tr
#unlink(fn)
}else{
phymlplist[[i]] <- NA
}
}
testtrees <- iqjlist
phdist <- list()
kfdist <- list()
for(i in 1:numtrees){
print(i)
tr1 <- testtrees[[i]]
tr2 <- trees[[i]]
if(!is.na(tr1)){
phdist[[i]] <- dist.topo(tr1,tr2,"PH85")
kfdist[[i]] <- dist.topo(tr1,tr2,"score")
}else{
phdist[[i]] <- NA
kfdist[[i]] <- NA
}
}
iqj.phdist <- phdist
iqj.kfdist <- kfdist
table(iqj.phdist %>% unlist %>% na.omit %>% as.integer)
hist(iqj.kfdist %>% unlist %>% na.omit %>% as.numeric)
table(rxp.phdist %>% unlist %>% na.omit %>% as.integer)
table(ex.phdist %>% unlist %>% na.omit %>% as.integer)
testtrees <- phymlplist
phdist <- list()
kfdist <- list()
for(i in 1:numtrees){
print(i)
tr1 <- testtrees[[i]]
tr2 <- trees[[i]]
if(!is.na(tr1)){
phdist[[i]] <- dist.topo(tr1,tr2,"PH85")
kfdist[[i]] <- dist.topo(tr1,tr2,"score")
}else{
phdist[[i]] <- NA
kfdist[[i]] <- NA
}
}
phymlp.phdist <- phdist
phymlp.kfdist <- kfdist
table(phymlp.phdist %>% unlist %>% na.omit %>% as.integer)
iqjlist <- list()
iqjloglist <- list()
for(i in 1:numtrees){
print(i)
sq <- slist[[i]]
if(slen[i]>=4){
td <- tempdir()
fn <- tempfile(tmpdir=td,fileext=".phy")
write.dna(sq,fn,format="interleaved")
cmd <- sprintf("iqtree-omp -nt 2 -s %s -spj regional_partition.nex",fn)
system(cmd)
tr <- read.tree("regional_partition.nex.treefile")
l <- readLines("regional_partition.nex.iqtree")
iqjlist[[i]] <- tr
iqjloglist[[i]] <- l
unlink(fn)
}else{
iqjlist[[i]] <- NA
iqjloglist[[i]] <- NA
}
}
testtrees <- iqjlist
phdist <- list()
kfdist <- list()
for(i in 1:numtrees){
print(i)
tr1 <- testtrees[[i]]
tr2 <- trees[[i]]
if(!is.na(tr1)){
phdist[[i]] <- dist.topo(tr1,tr2,"PH85")
kfdist[[i]] <- dist.topo(tr1,tr2,"score")
}else{
phdist[[i]] <- NA
kfdist[[i]] <- NA
}
}
iqj.phdist <- phdist
iqj.kfdist <- kfdist
table(iqj.phdist %>% unlist %>% na.omit %>% as.integer)
save.image("~/Projects/pangea-round2/villagetraining/phylotest3.RData")
ex.tr.fn <- "../villagetraining/ExaML_result.vill"
ex.tr.fn
ex.tr <- read.tree(ex.tr.fn)
ex.tr
ex.tr.td <- read.table("./villagetraining/vill.td",skip=1)
ex.tr.td <- read.table("../villagetraining/vill.td",skip=1)
ex.tr.td
ex.tr.td[,1] %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist
ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",2) %>% unlist)
paste(ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist,
ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",2) %>% unlist)
paste(ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist,
ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",2) %>% unlist,
sep="_")
ex.tr.td[,1] <- paste(ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist,
ex.tr.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",2) %>% unlist,
sep="_")
ex.td <- read.table("../villagetraining/vill.td",skip=1)
ex.td[,1] <- paste(ex.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",1) %>% unlist,
ex.td[,1] %>% as.character %>% strsplit(.,"-",fixed=TRUE) %>% lapply(.,"[",2) %>% unlist,
sep="_")
ex.td
stub <- "villagetrain"
tn
tn <- ex.td[,1]
td <- ex.td[,2]
write.table(rbind(c(length(tn),""),cbind(tn,td)),paste(stub,".td",sep=""),col.names=FALSE,row.names=FALSE,quote=FALSE)
setwd("~/Projects/pangea-round2/splittree")
s <- read.dna("../villagetraining/vill.phy",format="interleaved")
s
dim(s)
slen <- dim(s)[2]
lsd.cmd <- sprintf("lsd -i %s -d %s -c -n 1 -r -b %s -s %s -v",ex.tr.fn,paste(stub,".td",sep=""),paste(10),slen)
lsd.cmd
system(lsd.cmd)
write.table(rbind(c(length(tn),""),cbind(tn,td)),paste(stub,".td",sep=""),col.names=FALSE,row.names=FALSE,quote=FALSE)
lsd.cmd <- sprintf("lsd -i %s -d %s -c -n 1 -r -b %s -s %s -v",ex.tr.fn,paste(stub,".td",sep=""),paste(10),slen)
system(lsd.cmd)
ex.tr <- read.tree(ex.tr.fn)
write.tree(ex.tr,paste(stub,"tre",sep="."))
lsd.cmd <- sprintf("lsd -i %s -d %s -c -n 1 -r -b %s -s %s -v",paste(stub,"tre",sep="."),paste(stub,".td",sep=""),paste(10),slen)
system(lsd.cmd)
tr.lsd <- read.tree(sprintf("%s_result_newick_date.txt",stub))
tr.lsd
plot(tr.lsd)
td
tr.lsd
?rootDist
??rootDist
library(adephylo)
tr.lsd.rd <- distRoot(tr.lsd)
td.lsd.rd
tr.lsd.rd
hist(tr.lsd.rd)
library(phytools)
treeSlice
?treeSlice
max(tr.lsd.rd)
max(tr.lsd.rd)-treedepth
treedepth <- 20
max(tr.lsd.rd)-treedepth
slicetime <- max(tr.lsd.rd)-treedepth
tr.lsd.slicetrees <- treeSlice(tr.lsd,slice=slicetime,trivial=TRUE)
tr.lsd.slicetrees
lapply(tr.lsd.slicetrees,"[","tip.label")
lapply(tr.lsd.slicetrees,"[","tip.label") %>% lapply(.,length)
tr.lsd.slicesize <- lapply(tr.lsd.slicetrees,"[","tip.label") %>% lapply(.,length) %>% unlist
table(tr.lsd.slicesize)
ltt(tr.lsd)
tr.lsd.slicetrees <- treeSlice(tr.lsd,slice=slicetime,trivial=FALSE)
tr.lsd.slicesize
tr.lsd.slicesize <- lapply(tr.lsd.slicetrees,"[[","tip.label") %>% lapply(.,length) %>% unlist
tr.lsd.slicesize
table(tr.lsd.slicesize)
tr.lsd.slicetrees <- treeSlice(tr.lsd,slice=slicetime,trivial=TRUE)
tr.lsd.slicesize <- lapply(tr.lsd.slicetrees,"[[","tip.label") %>% lapply(.,length) %>% unlist
table(tr.lsd.slicesize)
minslice <- 10
tr.lsd.minslicetrees <- tr.lsd.slicetrees[tr.lsd.slicesize>=minslice]
tr.lsd.minslicetrees
numminslicetrees <- length(tr.lsd.minslicetrees)
numminslicetrees
tr
tr <- tr.lsd.minslicetrees[[i]]
s[match(tr$tip.label,row.names(s)),]
tr <- tr.lsd.minslicetrees[[i]]
i=1
tr <- tr.lsd.minslicetrees[[i]]
s[match(tr$tip.label,row.names(s)),]
tr.lsd.minslice.seqs <- list()
for(i in 1:numminslicetrees){
tr <- tr.lsd.minslicetrees[[i]]
tr.lsd.minslice.seqs[[i]] <- s[match(tr$tip.label,row.names(s)),]
}
?mkdir
??mkdir
dir.create(stub)
for(i in 1:numminslicetrees){
write.nexus.data(tr.lsd.minslice.seqs[[i]],paste(stub,"/",i,".nex",sep=""),format="dna",interleaved=FALSE)
}
seq.partition <- "
charset gag = 1-1479;
charset pol = 1480-4479;
charset env = 4480-6987;
partition villages = 3: gag, pol, env;
set partition = villages;
"
mbmodel <- "
set autoclose=yes;
lset applyto=(all) nst=6 rates=invgamma ngammacat=4;
prset statefreqpr=Dirichlet(1.0,1.0,1.0,1.0);
unlink statefreq=(all) revmat=(all) shape=(all) pinvar=(all);
prset applyto=(all) ratepr=variable;
prset brlenspr=clock:uniform;
prset topologypr=uniform;
prset clockratepr=lognorm(-9.0,1.0);
prset clockvar=igr;
prset nodeagepr=calibrated;
"
i=1
sq <- tr.lsd.minslice.seqs[[i]]
sq
ids <-  row.names(sq)
ids
match(ids,tn)
tipdates <- td[match(ids,tn)]
tipdates
tipage <- -(tipdates-max(tipdates))
numseqs <- length(sq)
mbblock <- rep("",numseqs)
for(j in 1:numseqs){
tipname <- ids[j]
#mbblock[j] <- paste("calibrate ",tipname,"=Uniform(",tipage[j],",",tipage[j],");",sep="")
mbblock[j] <- paste("calibrate ",tipname,"=fixed(",tipage[j],");",sep="")
}
mbblock <- paste(mbblock,collapse="\n")
calibrations <- mbblock
ca.k
calibrations
ids
numseqs
numseqs <- dim(sq)[1]
mbblock <- rep("",numseqs)
for(j in 1:numseqs){
tipname <- ids[j]
#mbblock[j] <- paste("calibrate ",tipname,"=Uniform(",tipage[j],",",tipage[j],");",sep="")
mbblock[j] <- paste("calibrate ",tipname,"=fixed(",tipage[j],");",sep="")
}
mbblock
mbblock <- paste(mbblock,collapse="\n")
calibrations <- mbblock
mcmcpars <- "
mcmc ngen=11000000 nruns=2 nchains=2 samplefreq=10000;
"
myseqs.nex <- paste(readLines(paste(stub,"/",i,".nex",sep="")),collapse="\n")
myseqs.nex
myseqs.nex <- gsub("DATATYPEDNA","DATATYPE=DNA",myseqs.nex,fixed=TRUE)
seq.partition
mcmc
myseqs.mb <- sprintf("begin mrbayes;\n%s%s%s%send;\n",seq.partition,mbmodel,calibrations,mcmcpars)
cat(myseqs.nex,myseqs.mb,file=paste(stub,"/",i,"_mb_clock.nex",sep=""),sep="\n")
mbclockfile <- paste(stub,"/",i,"_mb_clock.nex",sep="")
cat(myseqs.nex,myseqs.mb,file=mbclockfile,sep="\n")
mbcmd <- paste("mb",mbclockfile)
mbcmd
system(mbcmd)
mcmcpilot <- "
mcmc ngen=1100000 nruns=1 nchains=1 samplefreq=10000;
"
myseqs.mb <- sprintf("begin mrbayes;\n%s%s%s%send;\n",seq.partition,mbmodel,calibrations,mcmcpilot)
cat(myseqs.nex,myseqs.mb,file=mbclockfile,sep="\n")
library(XML)
source("makeXML.R")
do.call(tr.lsd.minslice.seqs,rbind)
do.call(rbind,tr.lsd.minslice.seqs)
tn
td
match(row.names(multiseqs),tn)
multiseqs <- do.call(rbind,tr.lsd.minslice.seqs)
match(row.names(multiseqs),tn)
multiseqs.tn <- row.names(multiseqs)
multiseqs.idx <- match(multiseqs.tn,tn)
multiseqs.td <- td[multiseqs.idx]
multiseqs.clusters <- list()
for(i in 1:numminslicetrees){
multiseqs.clusters[[i]] <- row.names(tr.lsd.minslice.seqs[[i]])
}
options(scipen=999)
getMultiLocusXML(multiseqs,multiseqs.td,multiseqs.clusters,11000000,10000,"vill_test")
warnings()
source("makeXML.R")
getMultiLocusXML(multiseqs,multiseqs.td,multiseqs.clusters,11000000,10000,"vill_test")
source("makeXML.R")
getMultiLocusXML(multiseqs,multiseqs.td,multiseqs.clusters,11000000,10000,"vill_test2")
for(i in 1:numminslicetrees){
dir.create(stub)
jiahisp{}
}
dir.create(stub)
for(i in 1:numminslicetrees){
sq <- tr.lsd.minslice.seqs[[i]]
write.nexus.data(sq,paste(stub,"/",i,".nex",sep=""),format="dna",interleaved=FALSE)
ids <-  row.names(sq)
tipdates <- td[match(ids,tn)]
tipage <- -(tipdates-max(tipdates))
numseqs <- dim(sq)[1]
mbblock <- rep("",numseqs)
for(j in 1:numseqs){
tipname <- ids[j]
#mbblock[j] <- paste("calibrate ",tipname,"=Uniform(",tipage[j],",",tipage[j],");",sep="")
mbblock[j] <- paste("calibrate ",tipname,"=fixed(",tipage[j],");",sep="")
}
mbblock <- paste(mbblock,collapse="\n")
calibrations <- mbblock
myseqs.nex <- paste(readLines(paste(stub,"/",i,".nex",sep="")),collapse="\n")
myseqs.nex <- gsub("DATATYPEDNA","DATATYPE=DNA",myseqs.nex,fixed=TRUE)
#mytrees.nex <- sprintf("begin trees;\n tree tree_1=%s\nend;\n",trees[[i]])
myseqs.mb <- sprintf("begin mrbayes;\n%s%s%s%send;\n",seq.partition,mbmodel,calibrations,mcmcpilot)
#cat(myseqs.nex,mytrees.nex,myseqs.mb,file=paste(stubs[i],"_mb_clock.nex",sep=""),sep="\n")
mbclockfile <- paste(stub,"/",i,"_mb_clock.nex",sep="")
cat(myseqs.nex,myseqs.mb,file=mbclockfile,sep="\n")
mbcmd <- paste("mb",mbclockfile)
system(mbcmd)
}
